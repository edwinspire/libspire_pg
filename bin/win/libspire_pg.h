/* libspire_pg.h generated by valac 0.12.0, the Vala compiler, do not modify */


#ifndef __R__OPERADORES_EDWINDLC_PROGRAMACION_PROYECTOSSOFTWARE_SOFTWARE_VALA_PROYECTOSVALA_PROYECTS_LIBSPIRE_PG_BIN_WIN_LIBSPIRE_PG_H__
#define __R__OPERADORES_EDWINDLC_PROGRAMACION_PROYECTOSSOFTWARE_SOFTWARE_VALA_PROYECTOSVALA_PROYECTS_LIBSPIRE_PG_BIN_WIN_LIBSPIRE_PG_H__

#include <glib.h>
#include <glib-object.h>
#include <stdlib.h>
#include <string.h>
#include <postgresql/libpq-fe.h>
#include <gee.h>
#include <float.h>
#include <math.h>

G_BEGIN_DECLS


#define EDWINSPIRE_PG_SQL_TYPE_PSQL_MISC (edwinspire_pg_sql_psql_misc_get_type ())
#define EDWINSPIRE_PG_SQL_PSQL_MISC(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), EDWINSPIRE_PG_SQL_TYPE_PSQL_MISC, edwinspirepgSQLPSQLMisc))
#define EDWINSPIRE_PG_SQL_PSQL_MISC_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), EDWINSPIRE_PG_SQL_TYPE_PSQL_MISC, edwinspirepgSQLPSQLMiscClass))
#define EDWINSPIRE_PG_SQL_IS_PSQL_MISC(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), EDWINSPIRE_PG_SQL_TYPE_PSQL_MISC))
#define EDWINSPIRE_PG_SQL_IS_PSQL_MISC_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), EDWINSPIRE_PG_SQL_TYPE_PSQL_MISC))
#define EDWINSPIRE_PG_SQL_PSQL_MISC_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), EDWINSPIRE_PG_SQL_TYPE_PSQL_MISC, edwinspirepgSQLPSQLMiscClass))

typedef struct _edwinspirepgSQLPSQLMisc edwinspirepgSQLPSQLMisc;
typedef struct _edwinspirepgSQLPSQLMiscClass edwinspirepgSQLPSQLMiscClass;
typedef struct _edwinspirepgSQLPSQLMiscPrivate edwinspirepgSQLPSQLMiscPrivate;

#define EDWINSPIRE_PG_SQL_TYPE_PG_CONN_BUILDER (edwinspire_pg_sql_pg_conn_builder_get_type ())
#define EDWINSPIRE_PG_SQL_PG_CONN_BUILDER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), EDWINSPIRE_PG_SQL_TYPE_PG_CONN_BUILDER, edwinspirepgSQLPgConnBuilder))
#define EDWINSPIRE_PG_SQL_PG_CONN_BUILDER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), EDWINSPIRE_PG_SQL_TYPE_PG_CONN_BUILDER, edwinspirepgSQLPgConnBuilderClass))
#define EDWINSPIRE_PG_SQL_IS_PG_CONN_BUILDER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), EDWINSPIRE_PG_SQL_TYPE_PG_CONN_BUILDER))
#define EDWINSPIRE_PG_SQL_IS_PG_CONN_BUILDER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), EDWINSPIRE_PG_SQL_TYPE_PG_CONN_BUILDER))
#define EDWINSPIRE_PG_SQL_PG_CONN_BUILDER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), EDWINSPIRE_PG_SQL_TYPE_PG_CONN_BUILDER, edwinspirepgSQLPgConnBuilderClass))

typedef struct _edwinspirepgSQLPgConnBuilder edwinspirepgSQLPgConnBuilder;
typedef struct _edwinspirepgSQLPgConnBuilderClass edwinspirepgSQLPgConnBuilderClass;
typedef struct _edwinspirepgSQLPgConnBuilderPrivate edwinspirepgSQLPgConnBuilderPrivate;

#define EDWINSPIRE_PG_SQL_TYPE_RESULT_PG (edwinspire_pg_sql_result_pg_get_type ())
#define EDWINSPIRE_PG_SQL_RESULT_PG(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), EDWINSPIRE_PG_SQL_TYPE_RESULT_PG, edwinspirepgSQLResultPg))
#define EDWINSPIRE_PG_SQL_RESULT_PG_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), EDWINSPIRE_PG_SQL_TYPE_RESULT_PG, edwinspirepgSQLResultPgClass))
#define EDWINSPIRE_PG_SQL_IS_RESULT_PG(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), EDWINSPIRE_PG_SQL_TYPE_RESULT_PG))
#define EDWINSPIRE_PG_SQL_IS_RESULT_PG_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), EDWINSPIRE_PG_SQL_TYPE_RESULT_PG))
#define EDWINSPIRE_PG_SQL_RESULT_PG_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), EDWINSPIRE_PG_SQL_TYPE_RESULT_PG, edwinspirepgSQLResultPgClass))

typedef struct _edwinspirepgSQLResultPg edwinspirepgSQLResultPg;
typedef struct _edwinspirepgSQLResultPgClass edwinspirepgSQLResultPgClass;
typedef struct _edwinspirepgSQLResultPgPrivate edwinspirepgSQLResultPgPrivate;

#define EDWINSPIRE_PG_SQL_TYPE_QUERY_BUILDER (edwinspire_pg_sql_query_builder_get_type ())
#define EDWINSPIRE_PG_SQL_QUERY_BUILDER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), EDWINSPIRE_PG_SQL_TYPE_QUERY_BUILDER, edwinspirepgSQLQueryBuilder))
#define EDWINSPIRE_PG_SQL_QUERY_BUILDER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), EDWINSPIRE_PG_SQL_TYPE_QUERY_BUILDER, edwinspirepgSQLQueryBuilderClass))
#define EDWINSPIRE_PG_SQL_IS_QUERY_BUILDER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), EDWINSPIRE_PG_SQL_TYPE_QUERY_BUILDER))
#define EDWINSPIRE_PG_SQL_IS_QUERY_BUILDER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), EDWINSPIRE_PG_SQL_TYPE_QUERY_BUILDER))
#define EDWINSPIRE_PG_SQL_QUERY_BUILDER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), EDWINSPIRE_PG_SQL_TYPE_QUERY_BUILDER, edwinspirepgSQLQueryBuilderClass))

typedef struct _edwinspirepgSQLQueryBuilder edwinspirepgSQLQueryBuilder;
typedef struct _edwinspirepgSQLQueryBuilderClass edwinspirepgSQLQueryBuilderClass;
typedef struct _edwinspirepgSQLQueryBuilderPrivate edwinspirepgSQLQueryBuilderPrivate;

#define EDWINSPIRE_PG_SQL_TYPE_QUERY_STRING (edwinspire_pg_sql_query_string_get_type ())
#define EDWINSPIRE_PG_SQL_QUERY_STRING(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), EDWINSPIRE_PG_SQL_TYPE_QUERY_STRING, edwinspirepgSQLQueryString))
#define EDWINSPIRE_PG_SQL_QUERY_STRING_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), EDWINSPIRE_PG_SQL_TYPE_QUERY_STRING, edwinspirepgSQLQueryStringClass))
#define EDWINSPIRE_PG_SQL_IS_QUERY_STRING(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), EDWINSPIRE_PG_SQL_TYPE_QUERY_STRING))
#define EDWINSPIRE_PG_SQL_IS_QUERY_STRING_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), EDWINSPIRE_PG_SQL_TYPE_QUERY_STRING))
#define EDWINSPIRE_PG_SQL_QUERY_STRING_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), EDWINSPIRE_PG_SQL_TYPE_QUERY_STRING, edwinspirepgSQLQueryStringClass))

typedef struct _edwinspirepgSQLQueryString edwinspirepgSQLQueryString;
typedef struct _edwinspirepgSQLQueryStringClass edwinspirepgSQLQueryStringClass;
typedef struct _edwinspirepgSQLQueryStringPrivate edwinspirepgSQLQueryStringPrivate;

struct _edwinspirepgSQLPSQLMisc {
	GObject parent_instance;
	edwinspirepgSQLPSQLMiscPrivate * priv;
};

struct _edwinspirepgSQLPSQLMiscClass {
	GObjectClass parent_class;
};

struct _edwinspirepgSQLPgConnBuilder {
	GObject parent_instance;
	edwinspirepgSQLPgConnBuilderPrivate * priv;
	gchar* Host;
	guint Port;
	gchar* DataBase;
	gchar* User;
	gchar* Password;
	gboolean SSL;
	guint TimeOut;
};

struct _edwinspirepgSQLPgConnBuilderClass {
	GObjectClass parent_class;
};

struct _edwinspirepgSQLResultPg {
	GObject parent_instance;
	edwinspirepgSQLResultPgPrivate * priv;
};

struct _edwinspirepgSQLResultPgClass {
	GObjectClass parent_class;
};

struct _edwinspirepgSQLQueryBuilder {
	GObject parent_instance;
	edwinspirepgSQLQueryBuilderPrivate * priv;
};

struct _edwinspirepgSQLQueryBuilderClass {
	GObjectClass parent_class;
};

struct _edwinspirepgSQLQueryString {
	edwinspirepgSQLQueryBuilder parent_instance;
	edwinspirepgSQLQueryStringPrivate * priv;
};

struct _edwinspirepgSQLQueryStringClass {
	edwinspirepgSQLQueryBuilderClass parent_class;
};


GType edwinspire_pg_sql_psql_misc_get_type (void) G_GNUC_CONST;
edwinspirepgSQLPSQLMisc* edwinspire_pg_sql_psql_misc_new (void);
edwinspirepgSQLPSQLMisc* edwinspire_pg_sql_psql_misc_construct (GType object_type);
gchar* edwinspire_pg_sql_psql_misc_ConnInfo (const gchar* Host, guint Port, const gchar* DBName, const gchar* User, const gchar* Password, gboolean SSL, guint TimeOut);
gboolean edwinspire_pg_sql_psql_misc_TryConnect (const gchar* Connection);
GeeArrayList* edwinspire_pg_sql_psql_misc_Result_FieldNum (PGresult* ResultPostgres);
GeeArrayList* edwinspire_pg_sql_psql_misc_Result_FieldName (PGresult* ResultPostgres);
GType edwinspire_pg_sql_pg_conn_builder_get_type (void) G_GNUC_CONST;
edwinspirepgSQLPgConnBuilder* edwinspire_pg_sql_pg_conn_builder_new (void);
edwinspirepgSQLPgConnBuilder* edwinspire_pg_sql_pg_conn_builder_construct (GType object_type);
gchar* edwinspire_pg_sql_pg_conn_builder_ConnInfo (edwinspirepgSQLPgConnBuilder* self);
GType edwinspire_pg_sql_result_pg_get_type (void) G_GNUC_CONST;
edwinspirepgSQLResultPg* edwinspire_pg_sql_result_pg_new (PGresult* ResultPostg_);
edwinspirepgSQLResultPg* edwinspire_pg_sql_result_pg_construct (GType object_type, PGresult* ResultPostg_);
gchar* edwinspire_pg_sql_result_pg_string (edwinspirepgSQLResultPg* self, GValue* field);
gint edwinspire_pg_sql_result_pg_int (edwinspirepgSQLResultPg* self, GValue* field);
glong edwinspire_pg_sql_result_pg_long (edwinspirepgSQLResultPg* self, GValue* field);
gulong edwinspire_pg_sql_result_pg_ulong (edwinspirepgSQLResultPg* self, GValue* field);
gdouble edwinspire_pg_sql_result_pg_double (edwinspirepgSQLResultPg* self, GValue* field);
gint64 edwinspire_pg_sql_result_pg_int64 (edwinspirepgSQLResultPg* self, GValue* field);
guint64 edwinspire_pg_sql_result_pg_uint64 (edwinspirepgSQLResultPg* self, GValue* field);
gboolean edwinspire_pg_sql_result_pg_bool (edwinspirepgSQLResultPg* self, GValue* field);
gint edwinspire_pg_sql_result_pg_get_Row (edwinspirepgSQLResultPg* self);
void edwinspire_pg_sql_result_pg_set_Row (edwinspirepgSQLResultPg* self, gint value);
gint edwinspire_pg_sql_result_pg_get_Rows (edwinspirepgSQLResultPg* self);
GType edwinspire_pg_sql_query_builder_get_type (void) G_GNUC_CONST;
GType edwinspire_pg_sql_query_string_get_type (void) G_GNUC_CONST;
edwinspirepgSQLQueryString* edwinspire_pg_sql_query_string_new (void);
edwinspirepgSQLQueryString* edwinspire_pg_sql_query_string_construct (GType object_type);
edwinspirepgSQLQueryBuilder* edwinspire_pg_sql_query_builder_new (void);
edwinspirepgSQLQueryBuilder* edwinspire_pg_sql_query_builder_construct (GType object_type);
edwinspirepgSQLQueryBuilder* edwinspire_pg_sql_query_builder_new_with_query (const gchar* Query);
edwinspirepgSQLQueryBuilder* edwinspire_pg_sql_query_builder_construct_with_query (GType object_type, const gchar* Query);
void edwinspire_pg_sql_query_builder_set_variable (edwinspirepgSQLQueryBuilder* self, const gchar* NameVar, GValue* ValueVar);
gchar* edwinspire_pg_sql_query_builder_Return (edwinspirepgSQLQueryBuilder* self);
void edwinspire_pg_sql_query_builder_ClearValues (edwinspirepgSQLQueryBuilder* self);
const gchar* edwinspire_pg_sql_query_builder_get_Query (edwinspirepgSQLQueryBuilder* self);
void edwinspire_pg_sql_query_builder_set_Query (edwinspirepgSQLQueryBuilder* self, const gchar* value);


G_END_DECLS

#endif
